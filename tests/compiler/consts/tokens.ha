glob =>
    TOKEN_ALLEQUALS "=&="
    TOKEN_ALLLESSOREQUALS "=<="
    TOKEN_ALLLESSTHAN "<<<"
    TOKEN_ALLMOREOREQUALS "=>="
    TOKEN_ALLMORETHAN ">>>"
    TOKEN_ALLNOTEQUALS "=!="
    TOKEN_AND "&&"
    TOKEN_ANYEQUALS "=|="
    TOKEN_ASTERIX "*"
    TOKEN_BANG "!"
    TOKEN_CASE "case"
    TOKEN_CLASS "class"
    TOKEN_COLON ":"
    TOKEN_COMMA ","
    TOKEN_COMPILER "compiler"
    TOKEN_COOLARROW "=>"
    TOKEN_DBLLESSTHAN "<<"
    TOKEN_DBLMORETHAN ">>"
    TOKEN_DEFAULT "default"
    TOKEN_DO "do"
    TOKEN_DOBR "dobr"
    TOKEN_DOCO "doco"
    TOKEN_DORE "dore"
    TOKEN_DOREMI "doremi"
    TOKEN_EIGHT "8"
    TOKEN_ELIF "elif"
    TOKEN_ELSE "else"
    TOKEN_ENUM "enum"
    TOKEN_EOF "EOF"
    TOKEN_EQUALITY "=="
    TOKEN_EQUALS "="
    TOKEN_EXTEND "extend"
    TOKEN_FALSE "false"
    TOKEN_FIVE "5"
    TOKEN_FOR "for"
    TOKEN_FOREACH "foreach"
    TOKEN_FORWARDSLASH "/"
    TOKEN_FOUR "4"
    TOKEN_FUNCTION "fn"
    TOKEN_GET "get"
    TOKEN_GLOBAL "glob"
    TOKEN_IFS "if"
    TOKEN_INCLUDE "inc"
    TOKEN_INT "int"
    TOKEN_LBLOCK "{"
    TOKEN_LBRACK "["
    TOKEN_LESSTHAN "<"
    TOKEN_LESSTHANOREQUALS "<="
    TOKEN_LET "let"
    TOKEN_LINE_COMMENT "//"
    TOKEN_LOOP "loop"
    TOKEN_LPAREN "("
    TOKEN_MACRODEFINITION "def"
    TOKEN_MORETHAN ">"
    TOKEN_MORETHANOREQUALS ">="
    TOKEN_NEWLINE "\n"
    TOKEN_NINE "9"
    TOKEN_NONEQUALITY "!="
    TOKEN_ONE "1"
    TOKEN_OR "||"
    TOKEN_POINTER "->"
    TOKEN_PRIVATE "private"
    TOKEN_PROTECTED "protected"
    TOKEN_PUBLIC "pub"
    TOKEN_RBLOCK "}"
    TOKEN_RBRACK "]"
    TOKEN_RETURN "return"
    TOKEN_RPAREN ")"
    TOKEN_SEMICOLON ";"
    TOKEN_SEVEN "7"
    TOKEN_SIX "6"
    TOKEN_STR "str"
    TOKEN_STRING "string"
    TOKEN_STRUCT "struct"
    TOKEN_SUB "-"
    TOKEN_SUM "+"
    TOKEN_SWITCH "switch"
    TOKEN_THREE "3"
    TOKEN_TRUE "true"
    TOKEN_TWO "2"
    TOKEN_TYPE "char"
    TOKEN_UNTIL "until"
    TOKEN_USE "use"
    TOKEN_WHILE "while"
    TOKEN_ZERO "0"
;