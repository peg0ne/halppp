{
    "name": "halppp",
    "boxing": [
        {
            "colors": [7,8,9,1,2,3],
            "start": "[",
            "end": "]"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "{",
            "end": "}"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "(",
            "end": ")"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "<",
            "end": ">"
        }
    ],
    "custom": [
        {
            "color": 8,
            "capture": 2,
            "expr": "(^|\W)([A-Z][A-Z_]*)"
        },
        {
            "color": 0,
            "capture": 2,
            "expr": "(^|\W)([a-z_]*)"
        },
        {
            "color": 9,
            "capture": 2,
            "expr": "(^|\W)([A-Z][A-z][A-z]*)"
        },
        {
            "color": 2,
            "capture": 2,
            "expr": "(^|\W)([A-z_]*)\("
        },
        {
            "color": 2,
            "capture": 1,
            "expr": "fn ([A-z_]*)\W"
        },
        {
            "color": 1,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(bool|int|short|double|float|long|wchar_t|char|string)(?=$|\W)"
        },
        {
            "color": 9,
            "capture": 1,
            "bold": true,
            "expr": "([0-9][0-9.]*)"
        },
        {
            "color": 9,
            "capture": 1,
            "bold": true,
            "expr": "(?:^|\W)(true|false|null)(?=$|\W)"
        },
        {
            "color": 3,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(new|from|in|until|do|dore|doco|dobr|doremi|let|auto|break|return|continue|case|default|catch|const|delete|this|extern|private|pub|public|protected|throw|try|register|typedef|friend|union|goto|unsigned|signed|virtual|void|volatile)(?=$|\W)"
        },
        {
            "color": 8,
            "capture": 1,
            "expr": "(<|>|=|\+|-|\?|:|!|\/|\*|%|\||&|\^|~|,|\$)"
        },
        {
            "color": 1,
            "capture": 1,
            "expr": "(?:^|\W)(if|else|elif|select|switch|while|loop|for|foreach)(?=$|\W)"
        },
        {
            "color": 1,
            "capture": 1,
            "expr": "(?:^|\W)(get|inc|use|named|compiler|class|struct|enum|fn|glob|;)(?=$|\W)"
        },
        {
            "color": 3,
            "capture": 1,
            "expr": "\"([^\"]*)\""
        },
        {
            "color": 9,
            "capture": 1,
            "expr": "('[^']')"
        },
        {
            "color": 0,
            "capture": 1,
            "dim": true,
            "expr": "(//.*)"
        }
    ],
    "wordlist": [
        "bool",
        "int",
        "short",
        "double",
        "float",
        "long",
        "wchar_t",
        "char",
        "string",
        "true",
        "false",
        "null",
        "new",
        "from",
        "in",
        "until",
        "do",
        "dore",
        "doco",
        "dobr",
        "doremi",
        "let",
        "auto",
        "break",
        "return",
        "continue",
        "case",
        "default",
        "catch",
        "const",
        "delete",
        "this",
        "extern",
        "private",
        "pub",
        "public",
        "protected",
        "throw",
        "try",
        "register",
        "typedef",
        "friend",
        "union",
        "goto",
        "unsigned",
        "signed",
        "virtual",
        "void",
        "volatile",
        "if",
        "else",
        "elif",
        "select",
        "switch",
        "while",
        "loop",
        "for",
        "foreach",
        "get",
        "inc",
        "use",
        "named",
        "compiler",
        "class",
        "struct",
        "enum",
        "fn",
        "glob",
        "ncurses",
        "ngui",
        "stringextensions",
        "print",
        "math",
        "regex"
    ],
    "rules": [
        {
            "type": "starts_with",
            "value": "get =>",
            "regex": "[\s,]([\w/.]*)",
            "validate": "file_exists",
            "validation_value": "capture_value",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "for ",
            "regex": "for\s*\w*\s*(\w*)",
            "validate": "equals",
            "validation_value": "until",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "foreach ",
            "regex": "foreach\s*\w*\s*(?:,\s*\w*)?\s*(\w*)",
            "validate": "equals",
            "validation_value": "in",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "select ",
            "regex": "select\s*\w*\s*(\w*)",
            "validate": "equals",
            "validation_value": "from",
            "capture": 1,
        }
    ]
}