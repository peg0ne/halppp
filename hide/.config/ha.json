{
    "name": "halppp",
    "colors": [
        {
            "color": 100,
            "fg": 197,
            "bg": 0
        },
        {
            "color": 101,
            "fg": 191,
            "bg": 0
        },
        {
            "color": 102,
            "fg": 185,
            "bg": 0
        },
        {
            "color": 103,
            "fg": 179,
            "bg": 0
        },
        {
            "color": 104,
            "fg": 181,
            "bg": 0
        },
        {
            "color": 105,
            "fg": 192,
            "bg": 0
        },
        {
            "color": 106,
            "fg": 203,
            "bg": 0
        },
        {
            "color": 107,
            "fg": 96,
            "bg": 0
        },
        {
            "color": 108,
            "fg": 180,
            "bg": 0
        },
        {
            "color": 109,
            "fg": 183,
            "bg": 0
        },
    ],
    "boxing": [
        {
            "colors": [7,8,9,1,2,3],
            "start": "[",
            "end": "]"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "{",
            "end": "}"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "(",
            "end": ")"
        },
        {
            "colors": [7,8,9,1,2,3],
            "start": "<",
            "end": ">"
        }
    ],
    "custom": [
        {
            "color": 8,
            "capture": 2,
            "expr": "(^|\W)([A-Z][A-Z_]*)"
        },
        {
            "color": 0,
            "capture": 2,
            "expr": "(^|\W)([a-z_]*)"
        },
        {
            "color": 9,
            "capture": 2,
            "expr": "(^|\W)([A-Z][A-z][A-z]*)"
        },
        {
            "color": 109,
            "capture": 2,
            "expr": "(^|\W)([A-z][A-z]*::[A-z][A-z]*)"
        },
        {
            "color": 109,
            "capture": 1,
            "bold": true,
            "expr": "\b([A-Z_]+)\b"
        },
        {
            "color": 2,
            "capture": 2,
            "expr": "(^|\W)([A-z_]*)\("
        },
        {
            "color": 2,
            "capture": 1,
            "expr": "fn ([A-z_]*)\W"
        },
        {
            "color": 2,
            "capture": 1,
            "expr": "^\s*> ([A-z_]*)\s"
        },
        {
            "color": 101,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(bool|int|short|double|float|long|wchar_t|char|vector|string)(?=$|\W)"
        },
        {
            "color": 105,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(Option|Some|None)(?=$|\W)"
        },
        {
            "color": 9,
            "capture": 1,
            "bold": true,
            "expr": "([0-9][0-9.]*)"
        },
        {
            "color": 100,
            "capture": 1,
            "bold": true,
            "expr": "(?:^|\W)(true|false|null)(?=$|\W)"
        },
        {
            "color": 3,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(let|auto|case|default|this)(?=$|\W)"
        },
        {
            "color": 106,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(new|break|return|continue|catch|static|const|delete|extern|throw|try|register|typedef|friend|union|goto|unsigned|signed|virtual|void|volatile)(?=$|\W)"
        },
        {
            "color": 102,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(do|dore|doco|dobr|doremi)(?=$|\W)"
        },
        {
            "color": 103,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(from|in|until)(?=$|\W)"
        },
        {
            "color": 104,
            "bold": true,
            "capture": 1,
            "expr": "(?:^|\W)(private|pub|public|protected)(?=$|\W)"
        },
        {
            "color": 8,
            "capture": 1,
            "expr": "(<|>|=|\+|-|\?|:|!|\/|\*|%|\||&|\^|~|,|\$)"
        },
        {
            "color": 1,
            "capture": 1,
            "expr": "(?:^|\W)(if|else|elif|match|select|switch|while|loop|for|foreach)(?=$|\W)"
        },
        {
            "color": 1,
            "capture": 1,
            "expr": "(?:^|\W)(select|for|foreach)(?=$|\W)"
        },
        {
            "color": 1,
            "capture": 1,
            "expr": "(?:^|\W)(get|inc|use|named|compiler|class|struct|enum|fn|glob|;)(?=$|\W)"
        },
        {
            "color": 3,
            "capture": 1,
            "expr": "\"([^\"]*)\""
        },
        {
            "color": 9,
            "capture": 1,
            "expr": "('[^']')"
        },
        {
            "color": 107,
            "capture": 1,
            "dim": true,
            "expr": "(//.*)"
        }
    ],
    "wordlist": [
        "bool",
        "int",
        "short",
        "double",
        "float",
        "long",
        "wchar_t",
        "char",
        "string",
        "true",
        "false",
        "null",
        "new",
        "from",
        "in",
        "until",
        "do",
        "dore",
        "doco",
        "dobr",
        "doremi",
        "let",
        "auto",
        "break",
        "return",
        "continue",
        "case",
        "default",
        "catch",
        "const",
        "delete",
        "this",
        "extern",
        "private",
        "pub",
        "public",
        "protected",
        "throw",
        "try",
        "register",
        "typedef",
        "friend",
        "union",
        "goto",
        "unsigned",
        "signed",
        "virtual",
        "void",
        "volatile",
        "if",
        "else",
        "elif",
        "select",
        "match",
        "switch",
        "while",
        "loop",
        "for",
        "foreach",
        "get",
        "inc",
        "use",
        "named",
        "compiler",
        "class",
        "struct",
        "enum",
        "fn",
        "glob",
        "ncurses",
        "ngui",
        "stringextensions",
        "print",
        "math",
        "regex"
    ],
    "rules": [
        {
            "type": "starts_with",
            "value": "get =>",
            "regex": "[\s,]([\w/.]*)",
            "validate": "file_exists",
            "validation_value": "capture_value",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "for ",
            "regex": "for\s*\w*\s*(\S*)",
            "validate": "equals",
            "validation_value": "until",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "foreach ",
            "regex": "foreach\s*\w*\s*(?:,\s*\w*)?\s*(\S*)",
            "validate": "equals",
            "validation_value": "in",
            "capture": 1,
        },
        {
            "type": "contains",
            "value": "select ",
            "regex": "select\s*\w*\s*(\S*)",
            "validate": "equals",
            "validation_value": "from",
            "capture": 1,
        }
    ],
    "templates": [
        {
            "name": "function",
            "template": ["fn ", "$ ", "=> ", "$", "%", "%", ";", "%"]
        },
        {
            "name": "function do",
            "template": ["fn ", "$ ", "=> ", "$ ", "do", "$ ", "$", "%"]
        },
        {
            "name": "select",
            "template": ["select ", "$ ", "from ", "$", "%", "%", ";", "%"]
        },
        {
            "name": "select do",
            "template": ["select ", "$ ", "from ", "$ ", "do", "$", "%"]
        },
        {
            "name": "loop",
            "template": ["loop", "%", "%", ";", "%"]
        },
        {
            "name": "loop do",
            "template": ["loop ", "do", "$", "$", "%"]
        },
        {
            "name": "while",
            "template": ["while ", "$", "%", "%", ";", "%"]
        },
        {
            "name": "for",
            "template": ["for ", "$ ", "until ", "$", "%", "%", ";", "%"]
        },
        {
            "name": "foreach",
            "template": ["foreach ", "$ ", "in ", "$", "%", "%", ";", "%"]
        },
        {
            "name": "lambda",
            "template": ["> " "$ ", "()", "%", "%", ";", "%"]
        }
    ]
}
