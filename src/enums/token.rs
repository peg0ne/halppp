#[derive(Debug, Copy, Clone)]
pub enum Token {
    Asterix,
    Class,
    Comma,
    Comment,
    Condition,
    CoolArrow,
    EOF,
    Equals,
    Extend,
    For,
    ForwardSlash,
    Function,
    Get,
    Global,
    Id,
    Include,
    LBrack,
    LParen,
    MacroDefinition,
    NewLine,
    Number,
    Private,
    Protected,
    Public,
    RBrack,
    Return,
    RParen,
    SemiColon,
    Struct,
    Sub,
    Sum,
    Type,
    Use,
}

impl Token {
    pub fn from(s: String) -> Token {
        match s.as_str() {
            "-" => Token::Sub,
            "," => Token::Comma,
            ";" => Token::SemiColon,
            "(" => Token::LParen,
            ")" => Token::RParen,
            "[" => Token::LBrack,
            "]" => Token::RBrack,
            "*" => Token::Asterix,
            "/" => Token::ForwardSlash,
            "//" => Token::Comment,
            "\n" => Token::NewLine,
            "+" => Token::Sum,
            "=" => Token::Equals,
            "=>" => Token::CoolArrow,
            "0" => Token::Number,
            "1" => Token::Number,
            "2" => Token::Number,
            "3" => Token::Number,
            "4" => Token::Number,
            "5" => Token::Number,
            "6" => Token::Number,
            "7" => Token::Number,
            "8" => Token::Number,
            "9" => Token::Number,
            "char" => Token::Type,
            "class" => Token::Class,
            "def" => Token::MacroDefinition,
            "elif" => Token::Condition,
            "extend" => Token::Extend,
            "fn" => Token::Function,
            "for" => Token::For,
            "foreach" => Token::For,
            "get" => Token::Get,
            "glob" => Token::Global,
            "if" => Token::Condition,
            "inc" => Token::Include,
            "int" => Token::Type,
            "private" => Token::Private,
            "protected" => Token::Protected,
            "pub" => Token::Public,
            "return" => Token::Return,
            "str" => Token::Type,
            "string" => Token::Type,
            "struct" => Token::Struct,
            "use" => Token::Use,
            _ => Token::Id,
        }
    }

    pub fn is_base(self: &Token) -> bool {
        match self {
            Token::Class => true,
            Token::EOF => true,
            Token::Function => true,
            Token::Get => true,
            Token::Global => true,
            Token::Include => true,
            Token::MacroDefinition => true,
            Token::NewLine => true,
            Token::SemiColon => true,
            Token::Struct => true,
            Token::Use => true,
            _ => false,
        }
    }
}
